#!/usr/bin/perl -w

use strict;


my $dataDir = "$ENV{HOME}/.local/share/tagit";
my $itemDir = "$dataDir/items";
my $dbName = "$dataDir/base.sqlite";


# 7) TODO: tagit search term	- must search in CONTENT
# 8) TODO: add VCS suport

use constant SQLITE_ERROR     =>   1;   # SQL error or missing database
use constant SQLITE_INTERNAL  =>   2;   # Internal logic error in SQLite
use constant SQLITE_PERM      =>   3;   # Access permission denied
use constant SQLITE_ABORT     =>   4;   # Callback routine requested an abort
use constant SQLITE_BUSY      =>   5;   # The database file is locked
use constant SQLITE_LOCKED    =>   6;   # A table in the database is locked
use constant SQLITE_NOMEM     =>   7;   # A malloc() failed
use constant SQLITE_READONLY  =>   8;   # Attempt to write a readonly database 
use constant SQLITE_INTERRUPT =>   9;   # Operation terminated by sqlite3_interrupt()
use constant SQLITE_IOERR     =>  10;   # Some kind of disk I/O error occurred 
use constant SQLITE_CORRUPT   =>  11;   # The database disk image is malformed 
use constant SQLITE_NOTFOUND  =>  12;   # NOT USED. Table or record not found 
use constant SQLITE_FULL      =>  13;   # Insertion failed because database is full 
use constant SQLITE_CANTOPEN  =>  14;   # Unable to open the database file 
use constant SQLITE_PROTOCOL  =>  15;   # NOT USED. Database lock protocol error 
use constant SQLITE_EMPTY     =>  16;   # Database is empty 
use constant SQLITE_SCHEMA    =>  17;   # The database schema changed 
use constant SQLITE_TOOBIG    =>  18;   # String or BLOB exceeds size limit 
use constant SQLITE_CONSTRAINT=>  19;   # Abort due to constraint violation 
use constant SQLITE_MISMATCH  =>  20;   # Data type mismatch 
use constant SQLITE_MISUSE    =>  21;   # Library used incorrectly 
use constant SQLITE_NOLFS     =>  22;   # Uses OS features not supported on host 
use constant SQLITE_AUTH      =>  23;   # Authorization denied 
use constant SQLITE_FORMAT    =>  24;   # Auxiliary database format error 
use constant SQLITE_RANGE     =>  25;   # 2nd parameter to sqlite3_bind out of range 
use constant SQLITE_NOTADB    =>  26;   # File opened that is not a database file 
use constant SQLITE_ROW       =>  100;  # sqlite3_step() has another row ready 
use constant SQLITE_DONE      =>  101;  # sqlite3_step() has finished executing 


use constant NOT_FOUND		=>	-1;
use constant ALREADY_EXISTS	=>	-2;
use constant SQL_ERROR		=>	-3;
use constant FS_ERROR		=>	-4;

use DBI;
use Digest::MD5::File qw(file_md5_hex);
use File::Spec;
use File::Copy;
use Getopt::Long qw (:config auto_abbrev permute no_ignore_case);


my $base="dbi:SQLite:dbname=$dbName";
my $dbh = DBI->connect($base,"","",
	{
        PrintError => 0,
	}
);

# configuration array. It will be filled by GetOptions.
# It is initialized there to disable warnings about uninitialized variables

my %config = (	tags	=> [], 
				name	=> [],
				source	=> [],
				file	=> [],
				hash	=> [],
				set		=> undef,
				output	=> undef,
				force	=> 0,
				copy	=> 0,
				ignore	=> 0,
	);



# What arguments are allowed for --output switch and to what database fields they are mapped.
# if value for some ker is code ref, it will be called to print this field. This
# code receives ref to hash with all values and must return value to output

my %outputVariants = (
	hash		=> 'hash',
	name		=> 'name',
	source		=> 'source',
	description	=> 'description',
	addtime		=> \&printTime,
);

# What object properties user is allowe to change with 'modify' command
# TODO: add code refs (similar to outputVariants) to convert user-supplied
# values into somesing else.

my %modifyVariants = (
	name		=> 'name',
	source		=> 'source',
	description	=> 'description',
);

my @defaultOutputFormat = ('hash', 'name');

my %commands = (
	tag		=>{
		objects => 1,
		func	=> \&cmdTag,
		unsafe	=> 1,
		args	=> 'file',
		switchesAllowed => [qw(tags name source file hash copy ignore)],
	},
	show	=>{
		objects => 1,
		func	=> \&cmdShow,
		unsafe	=> 0,
		args	=> 'hash',
		switchesAllowed => [qw(name source file hash output ignore)],
	},
	list	=>{
		objects => 0,
		func	=> \&cmdList,
		unsafe	=> 0,
		args	=> 'tags',
		switchesAllowed => [qw(tags output)],
	},
	taglist	=>{
		objects => 0,
		func	=> \&cmdTaglist,
		unsafe	=> 0,
		args	=> '',
		switchesAllowed => [],
	},
	get		=>{
		objects => 1,
		func	=> \&cmdGet,
		unsafe	=> 0,
		args	=> 'hash',
		switchesAllowed => [qw(tags name source file hash ignore)],
	},
	export	=>{
		objects => 1,
		func	=> \&cmdExport,
		unsafe	=> 0,
		args	=> 'hash',
		switchesAllowed => [qw(tags name source file hash ignore)],
	},
	attach	=>{
		objects => 1,
		func	=> \&cmdAttach,
		unsafe	=> 1,
		args	=> 'hash',
# TODO: fix allowed switches list - remove unneeded
		switchesAllowed => [qw(tags name source file hash output force copy ignore)],
	},
	untag		=>{
		objects => 1,
		func	=> \&cmdUntag,
		unsafe	=> 0,
		args	=> 'hash',
		switchesAllowed => [qw(tags name source file hash ignore)],
	},
	modify	=>{
		objects	=> 1,
		func	=> \&cmdModify,
		unsafe	=> 0,
		args	=> 'hash',
		switchesAllowed => [qw(set name source file hash ignore)],
	},

);

#list all possible switches. Each commands defines own list of needed switches
my %possibleSwitches = (
hash	=> 'hash|h=s@{1,1000}',
name 	=> 'name|n=s@{1,1000}',
source	=> 'source|s=s@{1,1000}',
file	=> 'file|f=s@{1,1000}',
tags	=> 'tags|t=s@{1,1000}',
set		=> 'set|S=s%{1,1000}',
# output formats
output	=> 'output|o=s@{1,1000}',
# switches to alter behavior
force	=> 'force|F',
copy	=> 'copy|c',
ignore	=> 'ignore|i',
);


my $cmd;
my $objectList = [];


if (@ARGV) {
	$cmd = shift;
} else {
	stop("You must give a command", 1);
}
stop("Invalid command", 1) unless exists $commands{$cmd};


my @options = (\%config);
{
# create option list for current command
	my $params = $commands{$cmd};
	my $sa = $params->{switchesAllowed};
	for my $switch (@$sa) {
		push @options, $possibleSwitches{$switch};
	}
}

stop("",1) unless GetOptions(@options);

#check --output arguments

if ($config{output}) {
	foreach my $field(@{$config{output}}) {
		stop("Invalid field in --output: $field", 1) unless exists $outputVariants{$field};
	}
} else {
	$config{output} = [@defaultOutputFormat];
}

# add unprocessed arguments into config-defined list: tags, file, hash etc
if (@ARGV) {
	push @{$config{$commands{$cmd}->{args}}}, @ARGV;
}
if ($commands{$cmd}->{objects}) {
	$objectList = createObjectList();
}

$commands{$cmd}->{func}();

sub createObjectList {
	my $objectList = {};
	my $arr;
	# we have 2 modes for 'file':
	#	1) if we ADD files (unsafe=1), these files must NOT be in database (but we can ignore existence if
	#		--ignore key specified).
	#	2) if we QUERY database, we use fles as source for hash computation and add them to hash array. If
	#		such hash is absend in database, hash handling code returns error or jus continue, depending of
	#		--ignore switch presense
	foreach my $fName (@{$config{file}}) {
		unless (-f $fName) {
			next if ($config{ignore});
			stop("File not found: $fName", 2);
		}
		my $hash = file_md5_hex($fName);
		my $row = findObjects('hash', $hash);
		if ($commands{$cmd}->{unsafe}) {
			if ($row != NOT_FOUND) {
				if ($config{ignore}) {
					push @{$config{hash}}, $hash;
				} else {
					stop("File $fName already exists in database. Use --ignore switch to process command with it", 2);
				}
			} else {
				$config{files_checked}->{$fName} = $hash;
			}
		} else {
			if ($row == NOT_FOUND) {
				stop("File $fName was not found in database. You need to add it first using 'add' or 'attach' commands", 2);
			}
			push @{$config{hash}}, $hash;
		}
	}

	foreach my $hash (@{$config{hash}}) {
		$arr = findObjects('hash', $hash, $objectList);
		if ($arr == SQL_ERROR) {
			return SQL_ERROR;
		}
		stop("There is no such object: $hash", 2) if ($arr == NOT_FOUND && !$config{ignore});
	}
	foreach my $type(('hash', 'name', 'source')) {
		foreach my $value (@{$config{$type}}) {
			$arr = findObjects($type, $value, $objectList);
			if ($arr == SQL_ERROR) {
				return SQL_ERROR;
			}
			stop("There is no such object: $value", 2) if ($arr == NOT_FOUND && !$config{ignore});
		}
	}
	return $objectList;
}


sub getTagsObjects {
	# ref to array of tag names
	my $tags = shift;
	# ref to destination array - optional
	my $objects;
	$objects = shift if (@_);
	my $results = {};
	foreach my $tag(@$tags) {
		my $tagContent = listTagContent($tag, $results);
		stop("Internal Error", 2) if ($tagContent == SQL_ERROR);
	}
	hashMerge($objects, $results) if $objects;
	return $results;
}


sub createObjectOutput {
	# arg is ref to hash with object properties
	my $objectInfo = shift;
	my @values;
	for my $field (@{$config{output}}) {
		if (ref($outputVariants{$field}) eq 'CODE') {
			push @values, &{$outputVariants{$field}}($objectInfo);
		} else {
			push @values, $objectInfo->{$outputVariants{$field}};
		}
	}
	return \@values;
}

sub printArray {
	# at least $row and $delim must be passed
	my ($row, $delim, $start, $end) = @_;
	print $start if defined $start;
	print join($delim, @$row);
	print $end if defined $end;
}

sub printTime {
	my $objectInfo = shift;
	return scalar localtime($objectInfo->{addtime});
}

sub cmdGet {
	map {extractList($_, \&my_symlink)} ($objectList, getTagsObjects($config{tags}));
}

sub cmdExport {
	map {extractList($_, \&copy)} ($objectList, getTagsObjects($config{tags}));
}

sub my_symlink{
	return symlink $_[0], $_[1];
}

sub extractList{
	# extracts objects given by first arg ot user filesystem using function given by second arg.
	# For example, it can be symlink or copy
	my $objects = shift;
	my $exportFunc = shift;
	while (my ($hash, $objInfo) = each %$objects) {
		my $path = hash2dir($objInfo->{hash}) . "/$hash";
		# TODO: hackish - need to handle URLs
		my (undef, undef, $fName) = File::Spec->splitpath($objInfo->{source});
		my ($name, $ext);
		if ($fName =~ /(.*?[^\\])\.(.*)$/) {
			($name, $ext) = ($1, $2)
		} else {
			($name, $ext) = ($fName, '');
		}
		my $i = 0;
		while (-e $fName) {
			++$i;
			$fName = "$name($i).$ext";
		}
		print STDERR "Cannot create symlink $fName to $path for $objInfo->{name}\n" unless ($exportFunc->($path, $fName));
	}
}


sub cmdList {
	my $files = getTagsObjects($config{tags});
# TODO: decide, if I need to show error 'tag not found', or just show empty tag
	return $files unless (ref $files);
	while (my ($hash, $row) = each(%$files)) {
		my $arr = createObjectOutput($row);
		printArray($arr, "\t", "", "\n");
	}
}


sub arr2bind {
	# create '?' for each array item
	# for example, for ('a', 'b', 5) this will return '?, ?, ?';
	my $arr = shift;
	my $s = '?,' x @$arr;
	chop $s;
	return $s;
}

sub cmdUntag {
	unless (scalar %$objectList) {
#		stop("Please, enter at least one object (there are many ways to do htis - see man page)", 1);
		return;
	}
	unless (scalar @{$config{tags}}) {
#		stop("Please, enter at least one tag (after --tags switch)", 1);
		return;
	}

	my $tagFilter =  'tags.name IN (' . arr2bind($config{tags}) . ')';
	my @objects = keys %$objectList;
	my $objFilter =  'objects.hash IN (' . arr2bind(\@objects) . ')';
	my $filterSql = "SELECT lid FROM links INNER JOIN objects ON (links.oid=objects.oid) INNER JOIN tags ON (links.tid=tags.tid) WHERE $tagFilter AND $objFilter";
	my $sql = "DELETE FROM links WHERE lid IN ($filterSql)";
	$dbh->begin_work();
	my $sth = $dbh->prepare($sql);
	unless ($sth->execute(@{$config{tags}}, keys %$objectList)) {
		$dbh->rollback();
		stop("Error while untagging", 3);
	};
	$dbh->commit();
}

sub listTagContent {
	my $tag = shift;
	my $objects;
	if (@_) {
		#if we have second arg, it's ref to hash where we must append results
		$objects = shift;
	} else {
		$objects = {};
	}
	my $result = {};
	my $row;
	my $sth = $dbh->prepare(
		"SELECT * FROM tags INNER JOIN links ON (tags.tid=links.tid) INNER JOIN objects ON (objects.oid = links.oid) WHERE tags.name=?");
	return SQL_ERROR unless($sth->execute($tag));
	while ($row = $sth->fetchrow_hashref) {
		$result->{$row->{hash}} = $row;
	}
	return NOT_FOUND unless (%$result);
	hashMerge($objects, $result) if ($objects);
	return $result;
}


sub hashMerge {
	return undef unless @_;
	my $main = shift;
	foreach my $hash (@_) {
		while (my ($k, $v) = each(%$hash)) {
			$main->{$k} = $v;
		}
	}
	
	return $main;
}

sub getObjectInfo {
	my $hash = shift;
	my $result;
	my $sth = $dbh->prepare("SELECT hash, source, addtime, name, description FROM objects WHERE hash=?");
	return SQL_ERROR unless ($sth->execute($hash));
	return NOT_FOUND unless ($result = $sth->fetchrow_hashref());
	return $result;
}



sub cmdTaglist {
	my $sth = $dbh->prepare("SELECT name FROM tags");
	return SQL_ERROR unless ($sth->execute());
	my $tag;
	while ($tag = $sth->fetchrow_array) {
		print "$tag\n";
	}
}

sub getObjectTags {
	# accepts hash that identify object;
	# returns ref to list with tag names
	my $hash = shift;
	my @tags;
	my $sth = $dbh->prepare(
		"SELECT tags.name FROM tags INNER JOIN links ON (tags.tid=links.tid) INNER JOIN objects ON (objects.oid = links.oid) WHERE objects.hash=?");
	return SQL_ERROR unless ($sth->execute($hash));
	while (my $tagName = $sth->fetchrow_array) {
		push @tags, $tagName;
	}
	return \@tags;
}
sub cmdShow {
# TODO: add different output formats
	while (my ($hash, $row) = each(%$objectList)) {

		my $arr = createObjectOutput($row);
		printArray($arr, "\t", "", ":\t");
		my $tags = getObjectTags($hash);
		my $i = 0;
		foreach my $tag (@$tags) {
			print ', ' if ($i++);
			print $tag;
		}
		print "\n";
	}
}


sub grabObject {
	my ($file, $hash) = @_;
#TODO: refactor to accept URLs
#	create date-named dir
	my $time = time();
	my $dirName = hash2dir($hash);
	mkdir $dirName;

	# split filename to parts
	my ($vol, $path, $fName) = File::Spec->splitpath($file);
	unless (-f "$dirName/$hash") {
		# hardlink file into this dir. If not allowed (by --copy) or different filesystems - copy
		if ($config{copy} || !link $file, "$dirName/$hash") {
		# cannot create hardlink, so we need copy
			my $result = copy $file, "$dirName/$hash";
			#if we cannot copy, abort
			return FS_ERROR unless ($result);
		}
	} else {
		stop("File $file already exists and this condition not catched  - error in program!",3) unless $config{ignore};
	}
	#	store in db: did	hash	external_filename	add_time
	$file = File::Spec->rel2abs($file);
	my $sth = $dbh->prepare("INSERT INTO objects (hash, source, name, addtime) VALUES (?, ?, ?, ?)");
	unless ($sth->execute($hash, $file, $fName, $time)) {
		return SQL_ERROR;
	}
	my $oid = $dbh->func('last_insert_rowid');
}

sub cmdTag {
	unless (scalar @{$config{tags}}) {
		stop("Please, enter at least one tag (after --tags switch) to tag with", 1);
	}
	my @oids;
	my $oid;
	$dbh->do("BEGIN TRANSACTION");
	while(my ($file, $hash) = each %{$config{files_checked}}) {
		$oid = grabObject($file, $hash);
		unless ($oid > 0) {
			$dbh->do("ROLLBACK TRANSACTION");
			stop("Error while importing $file", 3);
		}
		push @oids, $oid;
	}
	my @tids;
	my $tid;
	my $tag;
	my %tags;

	my $tagFilter = arr2bind($config{tags});
	my $sth = $dbh->prepare("SELECT tid, name FROM tags WHERE name IN ($tagFilter)");
	print "tagFilter = $tagFilter; tags count: ". scalar @{$config{tags}} ."\n";
	unless ($sth->execute(@{$config{tags}})) {
		$dbh->do("ROLLBACK TRANSACTION");
		stop("Error while getting tags info from database", 3);
	} else {
		while (($tid, $tag) = $sth->fetchrow_array) {
			$tags{$tag} = $tid;
		}
	}
	$sth = $dbh->prepare("INSERT INTO tags (name) VALUES (?)");
	foreach $tag (@{$config{tags}}) {
		next if exists ($tags{$tag});
		unless ($sth->execute($tag)) {
			$dbh->do("ROLLBACK TRANSACTION");
			stop("Error while adding tag $tag", 3);
		} else {
			$tid = $dbh->func('last_insert_rowid');
		}
		push @tids, $tid;

	}
#	store in db for each new tag: tid	tagname;	did	tid
	$sth = $dbh->prepare("INSERT INTO links (oid, tid) VALUES (?, ?)");
	foreach my $oid(@oids) {
		foreach $tid (@tids) {
			unless ($sth->execute($oid, $tid)) {
				$dbh->do("ROLLBACK TRANSACTION");
				stop("Error while tagging object", 3);
			}
		}
	}
	$dbh->do("COMMIT TRANSACTION");
}


sub cmdModify {
	stop ("You need to supply at least one object to modify", 1) unless ($objectList);
	stop ("You need to supply at least one object property to modify") unless (%{$config{set}});
	# check, if object properties are allowed to modify
	while (my($key, undef) = each %{$config{set}}) {
		stop("Invalid object property in --set: $key", 1) unless exists $modifyVariants{$key};
	}
	my $pairs = "";
	my @values;
	while (my($key, $value) = each %{$config{set}}) {
		$pairs .= ' ' . $modifyVariants{$key} . '=?,';
		push @values, $value;
	}
	chop $pairs;
	my $sth = $dbh->prepare("UPDATE objects SET $pairs WHERE oid=?");
	$dbh->begin_work();
	while (my ($hash, $row) = each %$objectList) {
		unless($sth->execute(@values, $row->{oid})) {
			$dbh->rollback();
			stop("Error while processing $hash ($row->{name}", 3);
		}
	}
	$dbh->commit();
}

sub findObjects{
	# field to search - reasonable variants are: oid, hash, name. Possible also source, addtime and description, 
	# but these fields are not indexed
	my $field = shift;
	# value to search
	my $value = shift;
	# ref to hash to add result (optional)
	# returns ref to hash: $hash => $row
	my $objects;
	if (@_) {
		$objects = shift;
	}
	my %results;
	my $sth = $dbh->prepare("SELECT * FROM objects WHERE $field=?");
	unless ($sth->execute($value)) {
		return SQL_ERROR;
	};
	my $row;
	while ($row = $sth->fetchrow_hashref()) {
		$results{$row->{hash}} = $row;
	}
	return NOT_FOUND if (!%results);
	hashMerge $objects, \%results if ($objects);
	return \%results;
}

sub hash2dir {
	my  $hash = shift;
	my $prefix = substr $hash, 0, 2;
	return "$itemDir/$prefix";
};

sub stop {
	my $code;
	if (scalar @_ >1) {
		$code = pop;
	} else {
		$code = 1;
	}
	print @_, "\n";
	exit $code;
}
